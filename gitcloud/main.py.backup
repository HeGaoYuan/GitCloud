#!/usr/bin/env python3

import argparse
import sys
import subprocess
from pathlib import Path
import inquirer

class Colors:
    """ANSI color codes for terminal output"""
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    CYAN = '\033[96m'
    DIM = '\033[2m'
    BOLD = '\033[1m'
    RESET = '\033[0m'


def print_colored(text, color=''):
    """Print colored text to terminal"""
    print(f"{color}{text}{Colors.RESET}")


def print_banner():
    """Print GitCloud banner"""
    print()
    print_colored("╔════════════════════════════════════════════════╗", Colors.CYAN)
    print_colored("║      GitCloud - Run GitHub Repo in Cloud       ║", Colors.CYAN)
    print_colored("╚════════════════════════════════════════════════╝", Colors.CYAN)
    print()


def prompt_for_input(prompt, default=None, choices=None):
    """
    Prompt user for input with optional default and choices

    Args:
        prompt: Prompt message
        default: Default value
        choices: List of valid choices

    Returns:
        User input or default
    """
    if choices:
        print_colored(f"\n{prompt}", Colors.CYAN)
        for idx, choice in enumerate(choices, 1):
            marker = " (default)" if default and choice['value'] == default else ""
            print(f"  {idx}. {choice['name']}{marker}")

        while True:
            try:
                choice_input = input(f"{Colors.CYAN}Select (1-{len(choices)}): {Colors.RESET}")
                if not choice_input and default:
                    return default

                choice_idx = int(choice_input) - 1
                if 0 <= choice_idx < len(choices):
                    return choices[choice_idx]['value']
                else:
                    print_colored("Invalid choice. Please try again.", Colors.RED)
            except (ValueError, KeyboardInterrupt):
                if default:
                    return default
                print_colored("Invalid input. Please try again.", Colors.RED)
    else:
        if default:
            prompt_text = f"{prompt} [{default}]: "
        else:
            prompt_text = f"{prompt}: "

        user_input = input(f"{Colors.CYAN}{prompt_text}{Colors.RESET}")
        return user_input.strip() or default


def prompt_yes_no(prompt, default=True):
    """
    Prompt user for yes/no confirmation

    Args:
        prompt: Prompt message
        default: Default value (True/False)

    Returns:
        Boolean response
    """
    default_str = "Y/n" if default else "y/N"
    user_input = input(f"{Colors.CYAN}{prompt} [{default_str}]: {Colors.RESET}").strip().lower()

    if not user_input:
        return default

    return user_input in ['y', 'yes']


def print_configuration_summary(config):
    """
    Print configuration summary

    Args:
        config: Configuration dictionary
    """
    print_colored("\n📋 Configuration Summary:", Colors.CYAN)
    print_colored("─────────────────────────────────────", Colors.DIM)

    print(f"{Colors.DIM}Repository URL:{Colors.RESET} {config.get('repo_url') or 'Not specified'}")
    print(f"{Colors.DIM}Cloud Provider:{Colors.RESET} {config.get('cloud_provider')}")

    gpu_count = config.get('gpu_count', 1)
    gpu_type = config.get('gpu_type')

    if gpu_count > 1:
        print(f"{Colors.DIM}GPU Type:{Colors.RESET} {gpu_count}x {gpu_type}")
    else:
        print(f"{Colors.DIM}GPU Type:{Colors.RESET} {gpu_type}")

    setup_commands = config.get('setup_commands', [])
    if setup_commands:
        print(f"{Colors.DIM}Setup Commands:{Colors.RESET} {len(setup_commands)} custom commands")
    elif config.get('repo_url'):
        print(f"{Colors.DIM}Setup:{Colors.RESET} Intelligent repository setup")
    else:
        print(f"{Colors.DIM}Setup Commands:{Colors.RESET} None")

    print_colored("─────────────────────────────────────\n", Colors.DIM)


def run_cloud_script(config):
    """
    Run the appropriate cloud provider script

    Args:
        config: Configuration dictionary

    Returns:
        Exit code from subprocess
    """
    import json
    import tempfile

    cloud_provider = config.get('cloud_provider', 'tencent')

    # Construct command based on provider
    if cloud_provider == 'tencent':
        script_path = Path(__file__).parent / 'provider' / 'tencent.py'
        cmd = ['python3', str(script_path)]

        # Add arguments
        if config.get('repo_url'):
            cmd.extend(['--repo', config['repo_url']])
        if config.get('region'):
            cmd.extend(['--region', config['region']])
        if config.get('model_provider'):
            cmd.extend(['--model', config['model_provider']])
        if config.get('yes'):
            cmd.append('--yes')
        # Pass resource spec if available
        if config.get('resource_spec'):
            resource_json = config['resource_spec'].to_json()
            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
                f.write(resource_json)
                resource_file = f.name
            cmd.extend(['--resource-spec', resource_file])

    elif cloud_provider == 'alibaba':
        script_path = Path(__file__).parent / 'provider' / 'alibaba.py'
        cmd = ['python3', str(script_path)]

        # Add arguments
        if config.get('repo_url'):
            cmd.extend(['--repo', config['repo_url']])
        if config.get('gpu_type'):
            cmd.extend(['--gpu', config['gpu_type']])
        if config.get('region'):
            cmd.extend(['--region', config['region']])
        if config.get('model_provider'):
            cmd.extend(['--model', config['model_provider']])
        if config.get('yes'):
            cmd.append('--yes')
        # Pass resource spec
        if config.get('resource_spec'):
            resource_json = config['resource_spec'].to_json()
            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
                f.write(resource_json)
                resource_file = f.name
            cmd.extend(['--resource-spec', resource_file])

    elif cloud_provider == 'onprem':
        script_path = Path(__file__).parent / 'provider' / 'onprem.py'
        cmd = ['python3', str(script_path)]

        # Add arguments
        if config.get('repo_url'):
            cmd.extend(['--repo', config['repo_url']])
        if config.get('nodeip'):
            cmd.extend(['--nodeip', config['nodeip']])
        if config.get('ssh_user'):
            cmd.extend(['--ssh-user', config['ssh_user']])
        if config.get('ssh_key'):
            cmd.extend(['--ssh-key', config['ssh_key']])
        if config.get('model_provider'):
            cmd.extend(['--model', config['model_provider']])
        if config.get('yes'):
            cmd.append('--yes')
        # GPU flag for onprem (boolean, not type)
        if config.get('gpu_type') and config.get('gpu_type') != 'NONE':
            cmd.append('--gpu')
        # Pass resource spec
        if config.get('resource_spec'):
            resource_json = config['resource_spec'].to_json()
            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
                f.write(resource_json)
                resource_file = f.name
            cmd.extend(['--resource-spec', resource_file])

    else:
        print_colored(f"❌ Unsupported cloud provider: {cloud_provider}", Colors.RED)
        return 1

    # Print command
    print_colored(f"\n🚀 Starting cloud...", Colors.GREEN)
    print_colored(f"   Command: {' '.join(cmd)}", Colors.DIM)
    print()

    # Run subprocess
    try:
        result = subprocess.run(cmd, check=False)
        return result.returncode
    except KeyboardInterrupt:
        print_colored("\n\n⚠️  Operation cancelled by user", Colors.YELLOW)
        return 130
    except Exception as e:
        print_colored(f"❌ Error running cloud: {e}", Colors.RED)
        return 1


def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description='GitCloud - Run GitHub repositories in Cloud',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s --repo https://github.com/pytorch/examples
  %(prog)s --repo https://github.com/user/project --gpu A100-40GB
  %(prog)s --repo https://github.com/user/project --cloud tencent --gpu T4
  %(prog)s --yes --repo https://github.com/user/project --gpu A10G --gpu-count 2
        """
    )

    # Main arguments
    parser.add_argument(
        '-r', '--repo',
        type=str,
        help='GitHub repository URL'
    )

    parser.add_argument(
        '-y', '--yes',
        action='store_true',
        help='Skip confirmation prompts'
    )

    parser.add_argument(
        '--cloud',
        type=str,
        choices=['tencent', 'alibaba', 'onprem'],
        help='Cloud provider (or onprem for on-premises execution)'
    )

    parser.add_argument(
        '--region',
        type=str,
        default=None,
        help='Region for Cloud (default: ap-guangzhou for Tencent, cn-hangzhou for Alibaba)'
    )

    parser.add_argument(
        '--model',
        type=str,
        choices=['anthropic', 'deepseek'],
        help='AI model provider (anthropic: Claude Sonnet 4.5, deepseek: DeepSeek Chat)'
    )

    parser.add_argument(
        '--nodeip',
        type=str,
        help='IP address or hostname of on-premises server (required for onprem provider)'
    )

    parser.add_argument(
        '--ssh-user',
        type=str,
        default='root',
        help='SSH username for on-premises server (default: root)'
    )

    parser.add_argument(
        '--ssh-key',
        type=str,
        help='Path to SSH private key file for on-premises server'
    )

    # Resource specification arguments
    parser.add_argument(
        '--cpu',
        type=int,
        help='Number of CPU cores (requires all resource args)'
    )

    parser.add_argument(
        '--memory',
        type=int,
        help='Memory in GB (requires all resource args)'
    )

    parser.add_argument(
        '--disk',
        type=int,
        help='Disk space in GB (requires all resource args)'
    )

    parser.add_argument(
        '--bandwidth',
        type=int,
        help='Network bandwidth in Mbps (requires all resource args)'
    )

    parser.add_argument(
        '--no-analyze',
        action='store_true',
        help='Skip automatic resource analysis (use defaults)'
    )

    parser.add_argument(
        '--version',
        action='version',
        version='GitCloud CLI 1.0.0'
    )

    args = parser.parse_args()

    # Print banner
    print_banner()

    # Display alpha warning
    print_colored("⚠️  ALPHA SOFTWARE WARNING", Colors.RED + Colors.BOLD)
    print_colored("=" * 60, Colors.RED)
    print_colored("This software is in ALPHA stage. By using it, you acknowledge:", Colors.RED)
    print_colored("", Colors.RED)
    print_colored("  • Cloud resources may be purchased that don't meet expectations", Colors.RED)
    print_colored("  • Resources may not be cleaned up automatically in case of errors", Colors.RED)
    print_colored("  • You may incur unexpected cloud service charges", Colors.RED)
    print_colored("  • You are responsible for monitoring and managing your cloud costs", Colors.RED)
    print_colored("  • ALL NETWORK PORTS will be open to the internet (0.0.0.0/0)", Colors.RED)
    print_colored("  • Your cloud instance will be exposed to potential security threats", Colors.RED)
    print_colored("", Colors.RED)
    print_colored("Please review your cloud provider console regularly to ensure", Colors.RED)
    print_colored("all resources are properly terminated.", Colors.RED)
    print_colored("=" * 60, Colors.RED)
    print()

    print_colored("🔐 CREDENTIALS & PRIVACY NOTICE", Colors.YELLOW + Colors.BOLD)
    print_colored("=" * 60, Colors.YELLOW)
    print_colored("Your API credentials and private information:", Colors.YELLOW)
    print_colored("", Colors.YELLOW)
    print_colored("Cloud Provider Credentials (Tencent/Alibaba):", Colors.YELLOW)
    print_colored("  • Are NEVER sent to our servers or third parties", Colors.YELLOW)
    print_colored("  • Are used ONLY for direct API calls to your cloud provider", Colors.YELLOW)
    print_colored("  • May be saved locally in ~/.gitcloud/ (with your consent)", Colors.YELLOW)
    print_colored("", Colors.YELLOW)
    print_colored("Anthropic/DeepSeek API Key:", Colors.YELLOW)
    print_colored("  • Will be transferred to the cloud instance you create", Colors.YELLOW)
    print_colored("  • Will be stored in /tmp/ directory on the remote instance", Colors.YELLOW)
    print_colored("  • May appear in shell history and system logs on the instance", Colors.YELLOW)
    print_colored("  • Will remain on instance until you manually terminate it", Colors.YELLOW)
    print_colored("", Colors.YELLOW)
    print_colored("Security Recommendations:", Colors.YELLOW)
    print_colored("  • Always terminate cloud instances when finished", Colors.YELLOW)
    print_colored("  • Consider using separate API keys for cloud deployments", Colors.YELLOW)
    print_colored("  • Rotate your API keys regularly", Colors.YELLOW)
    print_colored("  • Protect ~/.gitcloud/ with chmod 700 permissions", Colors.YELLOW)
    print_colored("=" * 60, Colors.YELLOW)
    print()

    if not args.yes:
        print_colored("To proceed, please type: Yes, I understand", Colors.CYAN)
        user_input = input(f"{Colors.CYAN}> {Colors.RESET}").strip()

        if user_input != "Yes, I understand":
            print_colored("\n❌ Risk acknowledgment required. Operation cancelled.", Colors.RED)
            print_colored("You must type exactly: Yes, I understand", Colors.YELLOW)
            return 0
        print()

    # Initialize configuration
    config = {
        'repo_url': args.repo,
        'yes': args.yes,
        'cloud_provider': args.cloud,
        'region': args.region,
        'model_provider': args.model,
        'nodeip': args.nodeip,
        'ssh_user': args.ssh_user,
        'ssh_key': args.ssh_key,
        'setup_commands': [],
        'resource_spec': None  # All resource info (CPU, memory, GPU, etc.) stored here
    }

    # Prompt for repository URL if not provided
    if not config['repo_url']:
        config['repo_url'] = prompt_for_input(
            "Enter GitHub repository URL",
            default=None
        )

        if not config['repo_url']:
            print_colored("❌ Repository URL is required", Colors.RED)
            return 1

    # Handle resource specification
    # Check if user provided any resource parameters
    user_provided_resources = any([
        args.cpu is not None,
        args.memory is not None,
        args.disk is not None,
        args.bandwidth is not None
    ])

    if user_provided_resources:
        # User wants to specify resources manually
        # Validate that all required resource parameters are provided
        missing_params = []
        if args.cpu is None:
            missing_params.append('--cpu')
        if args.memory is None:
            missing_params.append('--memory')
        if args.disk is None:
            missing_params.append('--disk')
        if args.bandwidth is None:
            missing_params.append('--bandwidth')

        if missing_params:
            print_colored(f"\n❌ Incomplete resource specification!", Colors.RED)
            print_colored(f"   When specifying resources manually, you must provide ALL of:", Colors.YELLOW)
            print_colored(f"   --cpu, --memory, --disk, --bandwidth", Colors.YELLOW)
            print_colored(f"\n   Missing parameters: {', '.join(missing_params)}", Colors.RED)
            print_colored(f"\n   Or omit all resource parameters to use automatic analysis.", Colors.CYAN)
            return 1

        # Create resource spec from user input
        # Note: GPU is determined by automatic analysis or can be left as default (no GPU)
        resource_spec = ResourceSpec(
            cpu_cores=args.cpu,
            memory_gb=args.memory,
            disk_gb=args.disk,
            bandwidth_mbps=args.bandwidth,
            gpu_required=False,  # No GPU by default when user specifies resources
            gpu_type=None,
            gpu_count=1,
            project_type='user_specified',
            analysis_reasoning='User-specified resource configuration',
            confidence=1.0
        )

        # Validate
        is_valid, error = resource_spec.validate()
        if not is_valid:
            print_colored(f"\n❌ Invalid resource specification: {error}", Colors.RED)
            return 1

        config['resource_spec'] = resource_spec
        print_colored("\n✅ Using user-specified resources:", Colors.GREEN)
        print_colored(resource_spec.get_summary(), Colors.DIM)

    elif not args.no_analyze:
        # Perform automatic resource analysis
        print_colored("\n🤖 No resource specifications provided - performing automatic analysis", Colors.CYAN)
        print_colored("   (Use --no-analyze to skip this step and use defaults)\n", Colors.DIM)

        try:
            resource_spec = analyze_resources(config['repo_url'], verbose=True)
            config['resource_spec'] = resource_spec

            print_colored("\n📊 Recommended Resources:", Colors.CYAN)
            print_colored(resource_spec.get_summary(), Colors.DIM)
            print_colored(f"\nReasoning: {resource_spec.analysis_reasoning}", Colors.DIM)

            # Ask for confirmation if not in --yes mode
            if not args.yes:
                print()
                if not prompt_yes_no("Accept these resource recommendations?", default=True):
                    print_colored("\n❌ Resource analysis rejected. Please specify resources manually.", Colors.YELLOW)
                    print_colored("   Use: --cpu <cores> --memory <gb> --disk <gb> --bandwidth <mbps>", Colors.CYAN)
                    return 1

        except Exception as e:
            print_colored(f"\n⚠️  Resource analysis failed: {e}", Colors.YELLOW)
            print_colored("   Falling back to default resources (2 CPU, 4GB RAM)", Colors.DIM)
            resource_spec = ResourceSpec(
                cpu_cores=2,
                memory_gb=4,
                disk_gb=50,
                bandwidth_mbps=100,
                project_type='fallback',
                analysis_reasoning='Fallback default due to analysis error'
            )
            config['resource_spec'] = resource_spec

    else:
        # User explicitly skipped analysis with --no-analyze
        print_colored("\n⏭️  Resource analysis skipped (--no-analyze flag)", Colors.CYAN)
        resource_spec = ResourceSpec(
            cpu_cores=2,
            memory_gb=4,
            disk_gb=50,
            bandwidth_mbps=100,
            project_type='default',
            analysis_reasoning='Default resources (analysis skipped)'
        )
        config['resource_spec'] = resource_spec
        print_colored("   Using default resources: 2 CPU, 4GB RAM, 50GB disk", Colors.DIM)

    # Prompt for model provider if not specified
    if not config['model_provider']:
        questions = [
            inquirer.List('model',
                         message="Select AI model provider",
                         choices=[
                             ('Anthropic Claude (Sonnet 4.5)', 'anthropic'),
                             ('DeepSeek (DeepSeek Chat)', 'deepseek'),
                         ],
                         default='anthropic',
                         carousel=True
                         ),
        ]
        answers = inquirer.prompt(questions)
        if not answers:
            print_colored("❌ Model provider selection is required", Colors.RED)
            return 1
        config['model_provider'] = answers['model']

    # Prompt for cloud provider with interactive menu
    if not args.cloud:
        questions = [
            inquirer.List('provider',
                         message="Select cloud provider",
                         choices=[
                             ('On-Premises (Use your own servers)', 'onprem'),
                             ('Tencent Cloud (CVM instances)', 'tencent'),
                             ('Alibaba Cloud (ECS instances)', 'alibaba'),
                         ],
                         carousel=True
                         ),
        ]
        answers = inquirer.prompt(questions)
        if not answers:
            print_colored("❌ Provider selection is required", Colors.RED)
            return 1
        config['cloud_provider'] = answers['provider']
    else:
        config['cloud_provider'] = args.cloud

    # Set default region based on cloud provider if not specified
    if not config['region']:
        if config['cloud_provider'] == 'alibaba':
            config['region'] = 'cn-hangzhou'
        else:  # tencent
            config['region'] = 'ap-guangzhou'

    # Prompt for nodeip if using onprem provider
    if config['cloud_provider'] == 'onprem' and not config['nodeip']:
        config['nodeip'] = prompt_for_input(
            "Enter server IP address or hostname",
            default=None
        )
        if not config['nodeip']:
            print_colored("❌ Server IP/hostname is required for on-premises deployment", Colors.RED)
            return 1

        # Prompt for SSH key if not provided
        if not config['ssh_key']:
            ssh_key = prompt_for_input(
                "Enter path to SSH private key (or press Enter to use default keys)",
                default=None
            )
            if ssh_key:
                config['ssh_key'] = ssh_key

    # Print configuration summary and confirm
    if not args.yes:
        print_configuration_summary(config)

        questions = [
            inquirer.Confirm('proceed',
                           message="Proceed with these settings?",
                           default=True),
        ]
        answers = inquirer.prompt(questions)
        if not answers or not answers['proceed']:
            print_colored("Operation cancelled by user.", Colors.YELLOW)
            return 0

    # Run Cloud
    exit_code = run_cloud_script(config)

    if exit_code == 0:
        print_colored("\n✅ Cloud completed successfully!", Colors.GREEN)
    else:
        print_colored(f"\n❌ Cloud exited with code {exit_code}", Colors.RED)

    return exit_code


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print_colored("\n\n⚠️  Operation cancelled by user", Colors.YELLOW)
        sys.exit(130)
    except Exception as e:
        print_colored(f"\n❌ Unexpected error: {e}", Colors.RED)
        sys.exit(1)
